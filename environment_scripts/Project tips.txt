For an airline to be able to vote for registration it is required that it has ?? payed 10 ether
For a consumer to be able to buy insurance for a flight it is required that the airline has ?? payed 10 ether

the flight struct and its mapping should be in the Data contract
You may find useful to have the struct, not the mapping of flights, in the App contract to organize the data of the function during its execution or if you fetch a Flight from the Data contract to get it when you call a function from the Data contract that returns a flight


using SafeMath for uint256;
mapping(address => uint256) private sales;
function safeWithdraw(uint256 amount) external {
//Checks
require(msg.sender == tx.origin, "Contracts not allowed"); //Ensure that this is callable only by an EOA Externally Owned Account.
require(sales[msg.sender] >= amount, Iinsufficient funds");

//Effects
uint256 amount = sales[msg.sender];
sales[msg.sender] = sales[msg.sender].sub(amount);

//Interaction
msg.sender.transfer(amount);
}

//environment --------------

git remote add origin https://github.com/Mark-Maslar/flightsurety
git push -u origin --all

git pull https://github.com/Mark-Maslar/flightsurety
// -------------------------


//Rate Limiting
using SafeMath for uint256;
uint256 private enabled = block.timestamp;

modifier rateLimit(uint time) {
require(block.timestamp >= enabled, "Rate limiting in effect");
enabled=enabled.add(time);
_;
}

function safeWithdraw(uint256 amount) external rateLimit(30 minutes) {
//TODO Code for withdraw
}


  it('(flight) an airline can register a flight after giving minimum funds of 10 ether', async () => {
    const contract = await FlightSuretyApp.deployed()
await contract.addFunds({from: airline1, value: web3.utils.toWei('10', 'ether')});
truffle migrate --reset --compile-all --network development


truffle migrate --reset --compile-all --network development

Testing: run each test file separately: 
truffle test ./test/flightSurety.js 
truffle test ./test/oracles.js

use web3.eth.getBalance(passenger) in the truffle test file


struct Airline {
        bool isRegistered;
        bool isFunded;
    }
"I think it is a good idea to store the name of the airline to identify it"


-------

The end of term date is May 7th, however all students 
get an automatic 4 week extension, so the final deadline 
that all projects need to be submitted, reviewed and 
marked as ‘complete’ is June 4th

-------------


The deployer of which contract: Data or App contract is the first airline ?

Hi there, you can use the FLightSuretyApp contract address or any other random address from your wallet

You can achieve this by either creating an Airline on the FlightSuretyData constructor using the owner address (FlightSuretyData contract)

---

Hello, what exactly is the difference between the functions buy(), pay(), fund() and creditInsurees(). I am not sure what logic should be implemented in the functions?

TODAY
Stefanel S.

4:39 PM

Profile photo
Hi! From my best understanding, the differences are:

buy(): when a customer wishes to buy an insurance for a future flights.
creditInsurees(): if a flight is delayed, ALL the insurees (all those that used buy() for that flight) get their balances credited with 1.5x the amount they paid in buy()
pay() - this is triggered when the insured person wants to checkout / withdraw their credit after. When a flight is delayed, the AppContract should call creditInsurees() and credit the balance of each insuree. The insurees can checkout their insurance by calling pay() (which will make their balance = 0).
fund() from what I understood, this is called when the airline company has registered and wishes to pay the 10 ether fee to participate in the voting process.
Overall, be careful as ALL the DataContract functions are only callable by the AppContract (apart from the pause /resume contract which can be done by the owner or by the appcontract ..depending on your implementation). Basically the data contract is/should be like a database with get/set/update/delete and limited access logic.

